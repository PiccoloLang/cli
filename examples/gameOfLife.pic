#! piccolo

var io = import 'io'
var time = import 'time'
var func = import 'libs/functional.pic'

# constants
var w = 30
var h = 10
var newline = '
'

# pure functional part

var boardToStr = fn board -> {
    var rowStrs = for y in 0..h {
        var row = for x in 0..w {
            if board[x][y] == 1
                '# '
            else
                '. '
        }
        func.reduce(fn prev, new -> prev + new, '')(row)
    }
    func.reduce(fn prev, new -> prev + new + newline, '')(rowStrs)
}

var getCell = fn board, x, y ->
    if x >= 0 and x < w and y >= 0 and y < h
        board[x][y]
    else
        0

var getNeighbourCount = fn board, x, y ->
    getCell(board, x - 1, y - 1) +
    getCell(board, x, y - 1) +
    getCell(board, x + 1, y - 1) +
    getCell(board, x + 1, y) +
    getCell(board, x + 1, y + 1) +
    getCell(board, x, y + 1) +
    getCell(board, x - 1, y + 1) +
    getCell(board, x - 1, y)

var getNextState = fn board, x, y -> {
    var neighbours = getNeighbourCount(board, x, y)
    var alive = if getCell(board, x, y) == 1
                    neighbours == 2 or neighbours == 3
                else
                    neighbours == 3
    if alive 1 else 0
}

var getNextBoard = fn board ->
    for x in 0..w
        for y in 0..h
            getNextState(board, x, y)

# side effect part
var board = for x in 0..w for y in 0..h 0
board[3][1] = 1
board[3][2] = 1
board[3][3] = 1
board[2][3] = 1
board[1][2] = 1

board[23][1] = 1
board[21][2] = 1
board[20][3] = 1
board[20][4] = 1
board[20][5] = 1
board[21][5] = 1
board[22][5] = 1
board[23][5] = 1
board[24][5] = 1
board[25][4] = 1
board[25][2] = 1

while true {
    io.print(boardToStr(board))
    board = getNextBoard(board)
    time.sleep(0.25)
}