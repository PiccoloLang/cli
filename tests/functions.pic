
import 'io' as io
import 'debug' as debug

io.print('FUNCTION TESTS')
io.print('==============')

# basic

var x = false
var setX = fn -> x = true
setX()
debug.assert(x)

# parameters

x = false
setX = fn val -> x = val
setX(true)
debug.assert(x)

setX = fn a, b -> x = a + b
debug.assert(setX(1, 5) == 6)
debug.assert(x == 6)

# returning

const add = fn a, b -> a + b
debug.assert(add(1, 1) == 2)
debug.assert(add(4, 5) == 9)

# closures

const outer = fn -> {
    var q = 5
    var inner = fn -> {
        debug.assert(q == 5)
        q = 10
    }
    inner()
    debug.assert(q == 10)
}
outer()

const makeFun = fn q -> fn -> q
debug.assert(makeFun(4)() == 4)

const outerrrr = fn -> {
    var p = 1
    var q = 2
    var r = 3
    var middle = fn -> {
        q = 10
        var inner = fn -> {
            r = 20
        }
        inner()
    }
    middle()
    p = 5
    debug.assert(p == 5)
    debug.assert(q == 10)
    debug.assert(r == 20)
}
outerrrr()

const loops = fn -> {
    var t = 0
    while t < 5 {
        t = t + 1
        var p = fn -> t = 10
        p()
    }
    debug.assert(t == 10)
}
loops()

const funTimesInPiccolo = fn -> {
    var e = 42
    const fun = fn -> e
    e = 35
    debug.assert(fun() == 35)
    e = 45
    debug.assert(fun() == 45)
}
funTimesInPiccolo()

const closuresArentFunToCode = fn -> {
    var result = nil
    {
        const variable = 55
        result = fn -> variable
    }
    {
        const variable = 99
    }
    result
}
debug.assert(closuresArentFunToCode()() == 55)

io.print()